from aocd import get_data

shifts = get_data(day=17, year=2022)
#shifts = open('sample.txt', 'r').read()

rocks = [{(3, 4), (4, 4), (5, 4), (6, 4)},
         {(3, 5), (4, 5), (5, 5), (4, 4), (4, 6)},
         {(3, 4), (4, 4), (5, 4), (5, 5), (5, 6)},
         {(3, 4), (3, 5), (3, 6), (3, 7)},
         {(3, 4), (4, 4), (3, 5), (4, 5)}]

prev = 0
init = []
pattern = [3, 0, 0, 1, 3, 0, 3, 0, 1, 3, 0, 4, 2, 1, 3, 0, 4, 0, 1, 3, 3, 0, 2, 1, 2, 2, 1, 0, 0, 3, 3, 0, 0, 1, 1, 2, 2, 2, 1, 3, 2, 1, 2, 0, 1, 3, 2, 0, 1, 2, 3, 2, 0, 1, 3, 2, 1, 2, 1, 2, 3, 2, 2, 1, 3, 2, 4, 0, 0, 2, 3, 4, 0, 1, 3, 3, 0, 0, 1, 3, 3, 0, 0, 1, 3, 3, 0, 0, 1, 0, 3, 0, 0, 1, 2, 1, 1, 2, 1, 3, 3, 0, 2, 1, 2, 2, 2, 2, 1, 0, 3, 2, 0, 1, 3, 0, 3, 2, 1, 3, 0, 3, 0, 1, 3, 2, 1, 2, 1, 1, 3, 0, 2, 1, 2, 2, 0, 2, 1, 3, 2, 4, 2, 1, 3, 0, 3, 0, 1, 3, 2, 0, 2, 1, 3, 0, 3, 0, 1, 2, 3, 0, 0, 1, 3, 3, 0, 0, 1, 2, 3, 2, 2, 1, 2, 2, 1, 0, 0, 2, 1, 1, 0, 0, 3, 2, 2, 0, 1, 3, 2, 1, 0, 0, 3, 2, 0, 0, 1, 3, 3, 0, 0, 1, 2, 3, 0, 0, 1, 3, 2, 1, 2, 1, 3, 2, 1, 2, 1, 3, 0, 4, 0, 0, 2, 0, 3, 0, 0, 1, 2, 2, 2, 1, 3, 3, 2, 0, 1, 3, 3, 2, 0, 1, 2, 1, 4, 2, 1, 2, 2, 2, 0, 1, 3, 0, 2, 2, 1, 3, 0, 3, 0, 0, 3, 3, 4, 0, 1, 3, 3, 2, 0, 1, 2, 2, 0, 2, 0, 0, 3, 2, 2, 1, 2, 1, 2, 0, 0, 2, 2, 2, 2, 1, 3, 3, 0, 0, 0, 2, 3, 4, 0, 0, 0, 3, 4, 0, 1, 3, 3, 4, 0, 1, 3, 0, 3, 0, 1, 2, 3, 0, 1, 1, 3, 0, 1, 1, 1, 3, 0, 3, 0, 1, 3, 0, 3, 0, 1, 3, 2, 0, 2, 1, 3, 0, 3, 0, 1, 3, 2, 2, 0, 1, 3, 3, 4, 0, 1, 3, 2, 0, 1, 0, 3, 2, 4, 0, 1, 3, 3, 0, 0, 1, 3, 2, 0, 1, 0, 3, 2, 4, 0, 0, 0, 3, 0, 0, 0, 3, 3, 2, 2, 1, 2, 3, 0, 2, 1, 3, 0, 3, 0, 0, 3, 0, 3, 0, 1, 3, 2, 2, 2, 1, 3, 3, 2, 2, 0, 0, 3, 4, 0, 1, 3, 3, 0, 0, 1, 2, 1, 3, 0, 0, 1, 3, 2, 2, 1, 3, 3, 2, 0, 1, 2, 1, 2, 0, 0, 3, 2, 0, 0, 1, 2, 3, 0, 0, 0, 3, 2, 2, 0, 1, 3, 3, 4, 2, 1, 3, 2, 2, 2, 1, 2, 1, 2, 0, 1, 3, 0, 4, 0, 0, 1, 3, 0, 2, 1, 2, 1, 3, 0, 1, 3, 2, 2, 2, 1, 2, 3, 0, 0, 0, 1, 0, 3, 2, 1, 2, 3, 0, 0, 0, 3, 3, 2, 0, 1, 3, 0, 2, 0, 1, 2, 3, 0, 0, 1, 2, 1, 2, 0, 1, 2, 3, 0, 0, 0, 3, 2, 1, 2, 0, 1, 2, 2, 0, 1, 3, 2, 2, 0, 0, 2, 3, 2, 2, 1, 3, 2, 0, 0, 1, 3, 2, 4, 0, 0, 0, 2, 2, 0, 0, 3, 2, 1, 0, 1, 3, 3, 0, 0, 1, 3, 3, 2, 0, 1, 3, 3, 2, 0, 1, 3, 2, 2, 0, 1, 3, 2, 4, 2, 1, 3, 3, 0, 0, 1, 2, 1, 2, 2, 1, 2, 2, 2, 0, 0, 2, 2, 4, 2, 1, 3, 0, 3, 0, 1, 3, 2, 4, 0, 1, 3, 2, 0, 0, 1, 3, 3, 0, 0, 1, 2, 2, 2, 0, 1, 2, 1, 2, 2, 1, 2, 2, 0, 2, 1, 2, 2, 4, 0, 1, 3, 2, 2, 0, 1, 3, 2, 2, 0, 1, 3, 3, 2, 0, 1, 3, 0, 4, 0, 1, 2, 2, 0, 0, 1, 2, 3, 0, 0, 1, 3, 2, 2, 0, 0, 3, 3, 4, 2, 1, 3, 3, 4, 0, 1, 2, 2, 0, 2, 1, 2, 1, 2, 2, 1, 3, 3, 2, 0, 1, 3, 3, 0, 0, 1, 3, 2, 4, 0, 1, 3, 2, 0, 2, 0, 0, 3, 2, 2, 0, 0, 3, 4, 2, 1, 2, 1, 3, 0, 1, 2, 2, 0, 2, 1, 2, 1, 3, 0, 0, 1, 2, 1, 0, 1, 3, 0, 0, 1, 1, 3, 2, 1, 2, 1, 0, 3, 2, 0, 1, 3, 3, 4, 0, 1, 3, 3, 4, 0, 1, 3, 2, 2, 0, 1, 2, 1, 2, 0, 1, 3, 3, 0, 0, 1, 3, 3, 4, 0, 0, 0, 3, 4, 0, 1, 2, 1, 3, 0, 0, 2, 3, 4, 0, 1, 3, 2, 2, 0, 1, 2, 3, 0, 0, 1, 3, 2, 1, 2, 1, 1, 3, 0, 0, 1, 3, 2, 4, 0, 0, 0, 1, 2, 2, 1, 3, 2, 0, 2, 1, 3, 3, 4, 0, 1, 3, 2, 2, 0, 1, 2, 3, 2, 2, 1, 3, 2, 2, 2, 1, 3, 3, 0, 0, 1, 2, 3, 2, 0, 0, 2, 3, 4, 0, 1, 0, 1, 3, 0, 1, 3, 2, 0, 0, 1, 2, 3, 0, 2, 1, 3, 3, 0, 0, 1, 3, 3, 0, 0, 1, 3, 2, 4, 0, 1, 2, 1, 2, 0, 1, 3, 2, 0, 2, 1, 0, 3, 2, 0, 1, 2, 3, 2, 0, 1, 0, 3, 2, 0, 1, 3, 3, 4, 0, 1, 3, 3, 4, 0, 1, 2, 2, 0, 0, 1, 3, 2, 2, 0, 1, 2, 1, 0, 1, 1, 3, 2, 1, 2, 1, 3, 3, 2, 0, 1, 2, 2, 2, 2, 1, 0, 3, 1, 0, 1, 0, 3, 2, 0, 1, 3, 2, 4, 0, 0, 0, 3, 2, 2, 1, 1, 3, 2, 2, 0, 0, 3, 1, 1, 1, 3, 3, 2, 0, 1, 3, 2, 4, 0, 1, 3, 0, 2, 0, 1, 3, 3, 0, 0, 1, 3, 3, 4, 2, 1, 2, 2, 0, 0, 1, 3, 2, 0, 0, 1, 3, 2, 2, 0, 1, 3, 0, 2, 0, 1, 2, 1, 2, 2, 1, 3, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 3, 2, 2, 1, 0, 3, 0, 0, 1, 3, 2, 4, 0, 1, 2, 3, 0, 2, 0, 1, 2, 1, 2, 1, 3, 3, 2, 0, 1, 3, 3, 2, 0, 1, 2, 3, 2, 2, 1, 3, 3, 2, 2, 1, 3, 2, 4, 0, 1, 3, 0, 0, 2, 1, 3, 3, 0, 2, 1, 3, 3, 4, 0, 1, 3, 2, 0, 0, 1, 3, 0, 2, 0, 1, 3, 3, 0, 2, 1, 3, 3, 4, 2, 0, 2, 2, 1, 1, 0, 3, 0, 2, 2, 0, 0, 3, 0, 2, 1, 3, 2, 1, 2, 1, 2, 3, 0, 0, 1, 3, 2, 0, 0, 1, 3, 2, 2, 2, 1, 3, 3, 0, 0, 1, 3, 3, 2, 2, 1, 3, 0, 1, 1, 0, 3, 0, 3, 2, 0, 0, 3, 0, 0, 1, 2, 2, 4, 0, 0, 3, 3, 2, 2, 1, 3, 2, 4, 2, 1, 2, 1, 2, 0, 1, 3, 3, 0, 0, 1, 2, 3, 0, 0, 1, 3, 3, 4, 0, 1, 3, 0, 0, 2, 1, 2, 2, 2, 2, 1, 3, 3, 2, 2, 1, 3, 2, 4, 0, 0, 2, 0, 3, 2, 0, 0, 3, 4, 0, 1, 3, 2, 2, 2, 1, 2, 1, 2, 0, 1, 2, 1, 0, 0, 1, 3, 3, 0, 2, 1, 3, 3, 4, 0, 1, 3, 3, 4, 2, 1, 3, 2, 0, 0, 1, 3, 3, 2, 0, 1, 2, 2, 2, 0, 1, 0, 3, 2, 2, 1, 3, 0, 2, 0, 1, 2, 2, 2, 2, 0, 0, 3, 0, 0, 0, 3, 3, 2, 0, 1, 3, 0, 4, 0, 0, 2, 3, 0, 1, 1, 2, 2, 2, 0, 1, 3, 3, 2, 2, 1, 3, 0, 3, 2, 1, 1, 3, 4, 0, 1, 3, 0, 4, 2, 1, 1, 2, 1, 0, 0, 3, 3, 4, 0, 1, 3, 0, 2, 0, 1, 3, 2, 1, 1, 1, 1, 2, 2, 0, 1, 2, 2, 2, 0, 1, 3, 3, 0, 0, 1, 3, 3, 2, 2, 1, 3, 2, 0, 0, 0, 3, 3, 0, 2, 1, 3, 3, 4, 2, 0, 0, 0, 4, 0, 1, 2, 3, 4, 2, 1, 3, 3, 2, 0, 1, 3, 3, 2, 0, 1, 2, 3, 2, 0, 1, 2, 3, 0, 0, 1, 3, 2, 2, 0, 1, 3, 3, 0, 2, 1, 0, 3, 0, 2, 1, 2, 2, 1, 1, 1, 3, 3, 0, 0, 1, 2, 3, 2, 0, 0, 2, 3, 2, 2, 1, 3, 2, 2, 0, 1, 2, 2, 0, 2, 0, 2, 2, 4, 2, 1, 3, 2, 1, 2, 1, 3, 3, 0, 0, 1, 2, 1, 2, 2, 1, 2, 3, 0, 2, 1, 2, 3, 0, 0, 1, 3, 2, 1, 2, 1, 2, 1, 3, 0, 0, 1, 3, 0, 2, 0, 2, 1, 2, 0, 0, 2, 2, 4, 0, 0, 2, 3, 0, 0, 1, 3, 2, 4, 0, 1, 3, 2, 2, 0, 0, 2, 2, 2, 0, 1, 3, 2, 1, 2, 1, 3, 3, 2, 0, 1, 3, 3, 2, 0, 1, 2, 2, 2, 0, 1, 3, 2, 0, 0, 1, 2, 3, 2, 2, 0, 0, 2, 4, 2, 1, 3, 3, 0, 0, 1, 3, 3, 2, 2, 1, 3, 3, 2, 0, 1, 3, 3, 2, 2, 1, 2, 3, 4, 0, 1, 3, 0, 3, 0, 1, 3, 0, 4, 0, 0, 2, 3, 4, 0, 1, 3, 2, 4, 2, 1, 2, 2, 2, 0, 1, 3, 2, 0, 0, 1, 3, 0, 2, 0, 1, 3, 0, 2, 2, 1, 3, 2, 2, 2, 0, 3, 3, 2, 0, 0, 2, 2, 2, 2, 1, 3, 0, 4, 2, 1, 3, 2, 0, 2, 1, 3, 3, 0, 2, 1, 2, 2, 2, 0, 1, 3, 0, 3, 0, 1, 0, 3, 2, 2, 1, 3, 2, 2, 2, 1, 3]
print(len(pattern))
trials = 1_000_000_000_000
settled = {(i, 0) for i in range(1, 8)}
maxHeight = 0
shifter = 0
for q in range(229):
    type_rock = rocks[q % 5]
    falling = set()
    for x, y in type_rock:
        falling.add((x, maxHeight + y))

    fall = True
    while fall:
        dx = 1 if shifts[shifter % len(shifts)] == '>' else -1
        for x, y in falling:
            if x + dx <= 0 or x + dx >= 8 or (x + dx, y) in settled:
                break
        else:
            temp = {(x + dx, y) for x, y in falling}
            falling = temp

        for x, y in falling:
            if (x, y - 1) in settled:
                fall = False
                break
        else:
            temp = {(x, y - 1) for x, y in falling}
            falling = temp
        shifter += 1
    settled.update(falling)
    maxHeight = max(maxHeight, max([y for x, y in falling]))
    init.append(maxHeight - prev)
    prev = maxHeight

init.append(maxHeight - prev)

print(maxHeight)
pattern = []
for q in range(229, 1755+228):
    type_rock = rocks[q % 5]
    falling = set()
    for x, y in type_rock:
        falling.add((x, maxHeight + y))

    fall = True
    while fall:
        dx = 1 if shifts[shifter % len(shifts)] == '>' else -1
        for x, y in falling:
            if x + dx <= 0 or x + dx >= 8 or (x + dx, y) in settled:
                break
        else:
            temp = {(x + dx, y) for x, y in falling}
            falling = temp

        for x, y in falling:
            if (x, y - 1) in settled:
                fall = False
                break
        else:
            temp = {(x, y - 1) for x, y in falling}
            falling = temp
        shifter += 1
    settled.update(falling)
    maxHeight = max(maxHeight, max([y for x, y in falling]))
    pattern.append(maxHeight - prev)
    prev = maxHeight


pattern.append(maxHeight - prev)

print(len(pattern))

sum_init = sum(init)
sum_patterns = sum(pattern) * ((trials - len(init)) // (len(pattern)))
sum_remainder = sum(pattern[:(trials - len(init)) % (len(pattern))])
print(sum_init + sum_patterns + sum_remainder)